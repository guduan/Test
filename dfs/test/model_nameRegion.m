function [name, id, isSLC] = model_nameRegion(prim, region, varargin)
%MODEL_NAMEREGION
% [NAME, ID, ISSLC] = MODEL_NAMEREGION(PRIM, REGION, OPTS) Finds all MAD
% names with primaries PRIM in regions REGION, e.g. {'L2' 'L3'}. Option LEM
% selects only LEM'd devices, i.e. excludes UND1 and BXG/BX0.
%
% Top level regions are GN, SP, L0, L1, L2, L3, LTU, L3-BSY, 52, A-Line
% Elementary regions are Cath_BXG BXG_BX01 BXG_FCG1 BX01_BX02 BX01_SAB
% BX02_QM15 QM15_BC2 BC2 BC2_L3END L3END_50B1 50B1_DMP 50B1_SL2 50B1_ESA
% Micro level regions are any micro which MODEL_NAMECONVERT knows. Any of
% the regions can be combined in the query.

% Features:

% Input arguments:
%    PRIM:   Char or cellstr (array) of primary names, e.g. 'QUAD', default
%            is BEND, BTRM, BNDS, KICK, QUAD, QTRM, QUAS, XCOR, YCOR
%    REGION: Optional parameter for accelerator areas, default full, e.g. 'L2'
%    OPTS:   Options
%            LEM: Default 0, if 1, deselect non LEM devices, i.e. UND1

% Output arguments:
%    NAME:  Cellstring of names matching PRIM and region
%    ID:    Array indicating index of matching PRIM for each NAME
%    ISSLC: Logical array indicating if device is SLC controlled

% Compatibility: Version 7 and higher
% Called functions: util_parseOptions, model_nameConvert, model_nameSplit

% Author: Henrik Loos, SLAC

% --------------------------------------------------------------------
% Set default options.
optsdef=struct( ...
    'LEM',0 ...
    );

% Use default options if OPTS undefined.
opts=util_parseOptions(varargin{:},optsdef);

if nargin < 1, prim=[];end
if nargin < 2, region=[];end
%if isempty(prim), prim={'*'};end
if isempty(prim), prim={'BEND' 'BTRM' 'BNDS' 'KICK' 'QUAD' 'QTRM' 'QUAS' 'XCOR' 'YCOR'};end
if isempty(region), region={'L0' 'L1' 'L2' 'L3' 'LTU'};end

region=reshape(cellstr(region),1,[]);
prim=cellstr(prim);

% Specify beam lines
beamLines={ ...
    'GN'     {'Cath_BXG' 'BXG_FCG1'}; ...
    'SP'     {'Cath_BXG' 'BXG_BX01' 'BX01_SAB'}; ...
    'L0'     {'Cath_BXG' 'BXG_BX01' 'BX01_BX02'}; ...
    'L1'     {'BX02_QM15'}; ...
    'L2'     {'QM15_BC2'}; ...
    'L3'     {'BC2' 'BC2_L3END' 'L3END_50B1'}; ...
    'LTU'    {'50B1_DMP'}; ...
    'L3-BSY' {'BC2' 'BC2_L3END' 'L3END_50B1' '50B1_DMP'}; ...
    '52'     {'50B1_SL2'}; ...
    'A-Line' {'50B1_ESA'}; ...
    'BSY'    {'L3END_50B1' '50B1_BSY'}; ...
    };

[d,id]=ismember(region(:),beamLines(:,1));
region=[region(~d) beamLines{id(d),2}];

% Specify each region by list of micros and unit number range within micro
% Range can also be specified with device names. Lower unit is excluded,
% higher unit is included to use same device or unit as split point.
% Regions do not have common elements.

% {Section [micro unit_start unit_end; ...]}
configList={ ...
    'Cath_BXG'   {'IN20'   0 230}; ...
    'BXG_BX01'   {'IN20' 231 660}; ...
    'BXG_FCG1'   {'IN20' 230 231; ...
                  'IN20' 799 899}; ...
    'BX01_BX02'  {'IN20' 660 751}; ...
    'BX01_SAB'   {'IN20' 899 999}; ...
    'BX02_QM15'  {'IN20' 751 799; ...
                  'LI21'   0 335}; ...
    'QM15_BC2'   {'LI21' 335 Inf; ...
                  'LI22'   0 Inf; ...
                  'LI23'   0 Inf; ...
                  'LI24'   0 700; ...
                  'LI24' 702 703}; ...
    'BC2'        {'LI24' 700 701; ...
                  'LI24' 703 899; ...
                  'LI24' 900 Inf}; ...
    'BC2_L3END'  {'LI24' 899 900; ...
                  'LI25'   0 Inf; ...
                  'LI26'   0 Inf; ...
                  'LI27'   0 Inf; ...
                  'LI28'   0 Inf; ...
                  'LI29'   0 Inf; ...
                  'LI30'   0 Inf}; ...
%    'BC2_L3END'  {'LI24' 700 701; ...
%                  'LI24' 703 Inf; ...
%                  'LI25'   0 Inf; ...
%                  'LI26'   0 Inf; ...
%                  'LI27'   0 Inf; ...
%                  'LI28'   0 Inf; ...
%                  'LI29'   0 Inf; ...
%                  'LI30'   0 Inf}; ...
    'L3END_50B1' {'BSY0'   0  40}; ...
    '50B1_BSY'   {'BSY0'  55 Inf}; ...
    '50B1_DMP'   {'BSY0'  55 Inf; ...
                  'LTU0'   0 Inf; ...
                  'LTU1'   0 Inf; ...
                  'UND1'   0 Inf; ...
                  'DMP1'   0 699}; ...
    '50B1_SL2'   {'BSY0'  40  55; ...
                  'CA01'   0 Inf; ...
                  'CA11'   0 Inf}; ...
    '50B1_ESA'   {'LI30' 1000 Inf; ...
                  'BSY0'  59  63; ...
                  'FB31'   0 Inf; ...
                  'CA11' 117 118; ...
                  'AB01'   0 Inf}; ...
    'BYD_SDMP'   {'DMP1' 699 Inf}; ...
%
% BBA regions
%
    'BSY_End'    {'BSY0'  84  87}; ...
    'UND_LaunchO' {'LTU1' 739 749; ...
                  'LTU1' 751 759; ...
                  'LTU1' 856 857; ...
                  'LTU1' 877 878; ...
                  'LTU1' 909 Inf}; ...
    'UND_Launch' {'LTU1' 729 738; ...
                  'LTU1' 817 818; ...
                  'LTU1' 877 878; ...
                  'LTU1' 746 747; ...
                  'LTU1' 836 837; ...
                  'LTU1' 856 857; ...
                  'LTU1' 909 Inf}; ...
    'UND_Launch2' {'LTU1' 729 738; ...
                  'LTU1' 817 818; ...
                  'LTU1' 877 878; ...
                  'LTU1' 746 747; ...
                  'LTU1' 836 837; ...
                  'LTU1' 856 857; ...
                  'UND1' 489 490; ...
                  'UND1' 589 590; ...
                  'UND1' 689 690; ...
                  'UND1' 789 790; ...
                  'UND1' 889 890; ...
                  'UND1' 989 990; ...
                  'UND1' 1089 1090}; ...
    'LI24_End'   {'LI24' 700 701; ...
                  'LI24' 899 Inf}; ...
    'UND'        {'LTU1' 900 Inf; ...
                  'UND1'   0 Inf; ...
                  'DMP1'   0 199}; ...
    };

% LEM exclude list
exclude=model_nameConvert({ ...
    'CQ01' 'SQ01' 'BXGT' ...
    'BX01' 'BX02' 'BX01T' ...
    'Q30615' 'Q30715' ...
    'XC69' 'YC54T' 'YC59' ...
    });
%{
exclude=[exclude model_nameConvert({ ...
    'BXH1' 'BXH2' 'BXH3' 'BXH4' 'BXH1T' 'BXH3T' 'BXH4T' ...
    'BX11' 'BX12' 'BX13' 'BX14' 'BX11T' 'BX13T' 'BX14T' ...
    'BX21' 'BX22' 'BX23' 'BX24' 'BX21T' 'BX23T' 'BX24T' ...
    })];
%}
%    removeList=[ ...
%        model_nameConvert({'BEND' 'BTRM'},'MAD',{'IN20' 'LI21' 'LI24'})'];

id=ismember(configList(:,1),region);
microList=setdiff(region(:),configList(:,1));
microList(:,2)={0};microList(:,3)={Inf};
microList=[microList;vertcat(configList{id,2})];

if opts.LEM, microList(strcmp(microList(:,1),'UND1'),:)=[];end

[name,id,isSLC]=model_nameConvert(prim(:),[],unique(microList(:,1)));
name=reshape(name,[],1);

[p,m,u]=model_nameSplit(name);
u(cellfun('isempty',u))={'0'};
u=char(u);u(any(isletter(u),2),:)='0';
u=reshape(str2num(char(u)),[],1);
use=false(size(name));

for j=1:size(microList,1)
    [micro,u1,u2]=deal(microList{j,:});
    use=use | any(strcmp([p m],micro),2) & u > u1 & u <= u2;
end

if ismember('QM15_BC2',region), use(strcmp(name,model_nameConvert('XC24702')))=true;end
%if ismember('BC2_L3END',region), use(strcmp(name,model_nameConvert('Q24701B')))=true;end
if ismember('BC2',region), use(strcmp(name,model_nameConvert('Q24701B')))=true;end
if ismember('50B1_DMP',region), use(ismember(name,model_nameConvert({'B4CXRAY' 'YAGXRAY'})))=false;end
if ismember('BYD_SDMP',region), use(ismember(name,model_nameConvert({'B4CXRAY' 'YAGXRAY'})))=true;end

if opts.LEM, use(ismember(name,exclude))=false;end

name=name(use);
id=id(use,:);
isSLC=isSLC(use);
